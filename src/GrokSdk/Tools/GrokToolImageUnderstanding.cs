using Newtonsoft.Json;

namespace GrokSdk.Tools
{
    /// <summary>
    /// Arguments for the image understanding tool.
    /// </summary>
    public class GrokToolImageUnderstandingArgs
    {
        /// <summary>
        /// The prompt or question about the image.
        /// </summary>
        [JsonProperty("prompt")]
        public string Prompt { get; set; } = string.Empty;

        /// <summary>
        /// The URL or base64-encoded image data.
        /// </summary>
        [JsonProperty("image_url")]
        public string ImageUrl { get; set; } = string.Empty;

        /// <summary>
        /// The level of detail for image analysis: "low" or "high". Defaults to "low".
        /// </summary>
        [JsonProperty("image_detail")]
        public string ImageDetail { get; set; } = "low";
    }

    /// <summary>
    /// Response from the image understanding tool.
    /// </summary>
    public class GrokToolImageUnderstandingResponse
    {
        /// <summary>
        /// The description or answer generated by the model.
        /// </summary>
        [JsonProperty("description")]
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// Error message if the operation failed.
        /// </summary>
        [JsonProperty("error")]
        public string? Error { get; set; }

        /// <summary>
        /// Deserializes a JSON string into a <see cref="GrokToolImageUnderstandingResponse"/> object.
        /// </summary>
        /// <param name="json">The JSON string to deserialize.</param>
        /// <returns>A <see cref="GrokToolImageUnderstandingResponse"/> object, or null if deserialization fails.</returns>
        public static GrokToolImageUnderstandingResponse? DeserializeResponse(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<GrokToolImageUnderstandingResponse>(json);
            }
            catch (JsonException)
            {
                return null;
            }
        }
    }

    /// <summary>
    /// A pre-built tool that performs image understanding using the Grok API.
    /// It analyzes an image based on a provided prompt and returns a description or answer.
    /// </summary>
    public class GrokToolImageUnderstanding : IGrokTool
    {
        /// <summary>
        /// Tool name used by Grok to identify it.
        /// </summary>
        public const string ToolName = "grok_tool_image_understanding";

        private readonly GrokClient _client;
        private readonly string _model;

        /// <summary>
        /// Initializes a new instance of the image understanding tool.
        /// </summary>
        /// <param name="client">The GrokClient instance for API calls.</param>
        /// <param name="model">The model to use for image understanding (e.g., "grok-3-latest").</param>
        /// <exception cref="ArgumentNullException">Thrown if client is null.</exception>
        public GrokToolImageUnderstanding(GrokClient client, string model = "grok-2-vision-latest")
        {
            _client = client ?? throw new ArgumentNullException(nameof(client));
            _model = model;
        }

        /// <summary>
        /// Gets the unique name of the tool.
        /// </summary>
        public string Name => ToolName;

        /// <summary>
        /// Gets a description of the tool's purpose for Grok's tool selection.
        /// </summary>
        public string Description =>
            "Analyzes an image using Grok's Image Understanding and provides a description or answers questions about it.";

        /// <summary>
        /// Gets the JSON schema for the tool's input parameters.
        /// </summary>
        public object Parameters => new
        {
            type = "object",
            properties = new
            {
                prompt = new { type = "string", description = "The question or prompt about the image." },
                image_url = new
                {
                    type = "string",
                    description = "The URL or base64-encoded image data (e.g., 'data:image/jpeg;base64,<data>'). Supported formats: jpg/jpeg, png. Maximum size: 10MiB."
                },
                image_detail = new
                {
                    type = "string",
                    @enum = new[] { "low", "high" },
                    @default = "low",
                    description = "The level of detail for image analysis: 'low' or 'high'."
                }
            },
            required = new[] { "prompt", "image_url" }
        };

        /// <summary>
        /// Executes the tool with JSON-serialized arguments.
        /// </summary>
        /// <param name="arguments">JSON string containing the prompt, image_url, and image_detail.</param>
        /// <returns>JSON-serialized response with the image description or an error message.</returns>
        public async Task<string> ExecuteAsync(string arguments)
        {
            try
            {
                var args = JsonConvert.DeserializeObject<GrokToolImageUnderstandingArgs>(arguments);
                if (args == null || string.IsNullOrEmpty(args.Prompt) || string.IsNullOrEmpty(args.ImageUrl))
                    return JsonConvert.SerializeObject(new GrokToolImageUnderstandingResponse { Error = "Prompt and image_url are required." });

                if (args.ImageDetail != "low" && args.ImageDetail != "high")
                    return JsonConvert.SerializeObject(new GrokToolImageUnderstandingResponse { Error = "image_detail must be 'low' or 'high'." });

                var imageUrl = new GrokImageUrl
                {
                    Url = args.ImageUrl,
                    Detail = args.ImageDetail == "high" ? GrokImageUrlDetail.High : GrokImageUrlDetail.Low
                };

                var message = new GrokUserMessage
                {
                    Content = new List<GrokContent>
                    {
                        new GrokTextPart { Text = args.Prompt },
                        new GrokImageUrlPart { Image_url = imageUrl }
                    }
                };

                var request = new GrokChatCompletionRequest
                {
                    Messages = new List<GrokMessage> { message },
                    Model = _model
                };

                var response = await _client.CreateChatCompletionAsync(request);
                var choice = response.Choices.First();
                return JsonConvert.SerializeObject(new GrokToolImageUnderstandingResponse { Description = choice.Message.Content });
            }
            catch (Exception ex)
            {
                return JsonConvert.SerializeObject(new GrokToolImageUnderstandingResponse { Error = $"Image understanding failed: {ex.Message}" });
            }
        }
    }
}