openapi: 3.0.3
info:
  title: Grok API
  description: API for interacting with Grok, an AI assistant created by xAI.
  version: 1.0.0
servers:
  - url: https://api.x.ai/v1
    description: Official xAI Grok API server
paths:
  /chat/completions:
    post:
      summary: Create a chat completion with Grok
      operationId: createChatCompletion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: Successful chat completion response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
            text/event-stream:
              schema:
                type: string
                description: |
                  Server-Sent Events stream of chat completion chunks when "stream" is true.
                  Each event is prefixed with "data: " followed by a JSON object like:
                  {"id": "<id>", "object": "chat.completion.chunk", "created": <time>,
                  "model": "<model>", "choices": [{"index": 0, "delta": {"content": "<text>", "role": "assistant"}}],
                  "usage": {...}, "system_fingerprint": "<fingerprint>"}
                  Ends with "data: [DONE]".
        '400':
          description: Invalid request (e.g., missing messages)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ChatCompletionRequest:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: List of messages in the conversation
        model:
          type: string
          description: The Grok model to use (e.g., grok-2-latest)
          example: "grok-2-latest"
        stream:
          type: boolean
          description: Whether to stream the response as Server-Sent Events
          default: false
        temperature:
          type: number
          format: float
          description: Controls randomness (0 = deterministic, higher = more creative)
          minimum: 0
          maximum: 2
          default: 0
        tools:
          type: array
          items:
            $ref: '#/components/schemas/Tool'
          description: List of tools (functions) available to the model
        tool_choice:
          oneOf:
            - type: string
              enum: ["auto", "required", "none"]
            - type: object
              properties:
                type:
                  type: string
                  enum: ["function"]
                function:
                  type: object
                  properties:
                    name:
                      type: string
              required:
                - type
                - function
            - type: 'null'
          default: null
          description: |
            Controls tool usage. Set to null or omit when no tools are provided.
            - "auto": model decides whether to use tools
            - "required": force tool call
            - "none": disable tool usage
            - object: specify a particular function
      required:
        - messages
        - model

    Message:
      type: object
      properties:
        role:
          type: string
          enum: ["system", "user", "assistant", "tool"]
      required:
        - role
      discriminator:
        propertyName: role
        mapping:
          system: '#/components/schemas/SystemMessage'
          user: '#/components/schemas/UserMessage'
          assistant: '#/components/schemas/AssistantMessage'
          tool: '#/components/schemas/ToolMessage'

    SystemMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: object
          properties:
            content:
              type: string
              description: The system message content
          required:
            - content

    UserMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: object
          properties:
            content:
              oneOf:
                - type: string
                  description: Text-only content
                - type: array
                  items:
                    $ref: '#/components/schemas/ContentPart'
                  description: Mixed text and image content
          required:
            - content

    AssistantMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: object
          properties:
            content:
              type: string
              description: The assistant's response text; may be a JSON string for structured outputs with certain models
            tool_calls:
              type: array
              items:
                $ref: '#/components/schemas/ToolCall'
              description: List of tool calls requested by the assistant

    ToolMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: object
          properties:
            content:
              type: string
              description: JSON string of the tool function’s result
            tool_call_id:
              type: string
              description: ID of the tool call this result corresponds to
          required:
            - content
            - tool_call_id

    ContentPart:
      oneOf:
        - $ref: '#/components/schemas/TextPart'
        - $ref: '#/components/schemas/ImageUrlPart'
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/TextPart'
          image_url: '#/components/schemas/ImageUrlPart'

    TextPart:
      type: object
      properties:
        type:
          type: string
          enum: ["text"]
        text:
          type: string
          description: Text content
      required:
        - type
        - text

    ImageUrlPart:
      type: object
      properties:
        type:
          type: string
          enum: ["image_url"]
        image_url:
          type: object
          properties:
            url:
              type: string
              description: URL or base64-encoded image (e.g., "data:image/jpeg;base64,<data>")
            detail:
              type: string
              enum: ["low", "high"]
              description: Image detail level
          required:
            - url
      required:
        - type
        - image_url

    Tool:
      type: object
      properties:
        type:
          type: string
          enum: ["function"]
        function:
          $ref: '#/components/schemas/FunctionDefinition'
      required:
        - type
        - function

    FunctionDefinition:
      type: object
      properties:
        name:
          type: string
          description: Name of the function
        description:
          type: string
          description: Function description
        parameters:
          type: object
          additionalProperties: true
          description: JSON schema for function parameters
      required:
        - name
        - parameters

    ToolCall:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the tool call
        type:
          type: string
          enum: ["function"]
        function:
          type: object
          properties:
            name:
              type: string
              description: Function name
            arguments:
              type: string
              description: JSON string of function arguments
          required:
            - name
            - arguments
      required:
        - id
        - type
        - function

    ChatCompletionResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the completion
          example: "9116ebda-e5d9-4885-b374-ea891b6b693c"
        object:
          type: string
          description: Type of object returned
          example: "chat.completion"
        created:
          type: integer
          description: Unix timestamp of when the completion was created
          example: 1739936964
        model:
          type: string
          description: The model used for the completion
          example: "grok-2-1212"
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice'
          description: List of response choices
        usage:
          $ref: '#/components/schemas/Usage'
        system_fingerprint:
          type: string
          description: Unique identifier for the system configuration
          example: "fp_c612364da3"
      required:
        - id
        - object
        - created
        - model
        - choices
        - usage

    Choice:
      type: object
      properties:
        index:
          type: integer
          description: Index of the choice
          example: 0
        message:
          $ref: '#/components/schemas/AssistantMessage'
        finish_reason:
          type: string
          enum: ["stop", "length", "error", "tool_calls"]
          description: Reason the completion stopped
          example: "stop"
      required:
        - index
        - message
        - finish_reason

    Usage:
      type: object
      properties:
        prompt_tokens:
          type: integer
          description: Number of tokens in the prompt
          example: 28
        completion_tokens:
          type: integer
          description: Number of tokens in the completion
          example: 5
        total_tokens:
          type: integer
          description: Total number of tokens used
          example: 33
        prompt_tokens_details:
          $ref: '#/components/schemas/PromptTokensDetails'
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens

    PromptTokensDetails:
      type: object
      properties:
        text_tokens:
          type: integer
          description: Number of text tokens in the prompt
          example: 28
        audio_tokens:
          type: integer
          description: Number of audio tokens (if applicable)
          example: 0
        image_tokens:
          type: integer
          description: Number of image tokens (if applicable)
          example: 0
        cached_tokens:
          type: integer
          description: Number of cached tokens (if applicable)
          example: 0
      required:
        - text_tokens
        - audio_tokens
        - image_tokens
        - cached_tokens

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid request: messages array is required"
      required:
        - error

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
security:
  - ApiKeyAuth: []